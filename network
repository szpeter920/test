# Connect to Azure account (only if not already authenticated)
if (!(Get-AzContext)) {
    Connect-AzAccount
}

# Function to convert an IP address to a 32-bit integer for comparison
function ConvertTo-IpInt {
    param ($ip)
    $bytes = $ip.Split('.') | ForEach-Object {[int]$_}
    return ($bytes[0] -shl 24) -bor ($bytes[1] -shl 16) -bor ($bytes[2] -shl 8) -bor $bytes[3]
}

# Function to generate a new subnet address based on an IP and offset
function GetSubnetAddress {
    param (
        [string]$baseIp,
        [int]$offset
    )
    $ipBytes = [System.Net.IPAddress]::Parse($baseIp).GetAddressBytes()
    $intValue = (ConvertTo-IpInt ($ipBytes -join '.')) + $offset
    return [System.Net.IPAddress]::new([BitConverter]::GetBytes([System.Net.IPAddress]::HostToNetworkOrder([int]$intValue)))
}

# Function to check if a subnet falls within or overlaps a used range
function DoesSubnetOverlap {
    param (
        [string]$subnetPrefix,
        [string]$usedPrefix
    )
    $subnetParts = $subnetPrefix.Split('/')
    $usedParts = $usedPrefix.Split('/')

    $subnetIpInt = ConvertTo-IpInt $subnetParts[0]
    $subnetMask = 32 - [int]$subnetParts[1]

    $usedIpInt = ConvertTo-IpInt $usedParts[0]
    $usedMask = 32 - [int]$usedParts[1]

    # Check if the subnet range overlaps with the used range
    return (($subnetIpInt -shr $usedMask) -eq ($usedIpInt -shr $usedMask))
}

# Retrieve all VNets in the subscription
$vnetList = Get-AzVirtualNetwork

foreach ($vnet in $vnetList) {
    Write-Output "Virtual Network: $($vnet.Name)"
    Write-Output "Location: $($vnet.Location)"
    Write-Output "Address Spaces: $($vnet.AddressSpace.AddressPrefixes -join ', ')"

    # Initialize a list to store used subnets
    $usedSubnets = @()
    
    # Retrieve used subnet ranges
    foreach ($subnet in $vnet.Subnets) {
        $usedSubnets += $subnet.AddressPrefix
        Write-Output "`tSubnet: $($subnet.Name)"
        Write-Output "`tAddress Prefix: $($subnet.AddressPrefix)"
    }
    
    # Calculate available /28 ranges within each Address Space
    foreach ($addressSpace in $vnet.AddressSpace.AddressPrefixes) {
        Write-Output "Checking Address Space: ${addressSpace}"

        # Break down Address Space into /28 ranges
        $addressPrefixParts = $addressSpace.Split('/')
        $baseIp = $addressPrefixParts[0]
        $baseCidr = [int]$addressPrefixParts[1]

        # Calculate the number of /28 subnets within this address space
        $numSubnets = [math]::Pow(2, (28 - $baseCidr))
        $availableSubnets = @()

        # Loop through potential /28 subnets in the range
        for ($i = 0; $i -lt $numSubnets; $i++) {
            $subnetIp = GetSubnetAddress -baseIp $baseIp -offset ($i * 16)  # Adjust by /28 size
            $subnetCidr = "$($subnetIp)/28"

            # Check if this /28 subnet overlaps with any used subnet
            $isUsed = $false
            foreach ($usedSubnet in $usedSubnets) {
                if (DoesSubnetOverlap -subnetPrefix $subnetCidr -usedPrefix $usedSubnet) {
                    $isUsed = $true
                    break
                }
            }
            
            # If not used, add to available subnet list
            if (-not $isUsed) {
                $availableSubnets += $subnetCidr
            }
        }
        
        # Display available /28 subnets
        if ($availableSubnets.Count -gt 0) {
            Write-Output "Available /28 Subnets in Address Space ${addressSpace}:"
            foreach ($subnet in $availableSubnets) {
                Write-Output "`t$subnet"
            }
        }
        else {
            Write-Output "No available /28 subnets in Address Space ${addressSpace}."
        }
    }
    
    Write-Output "-------------------------"
}
